import React, { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Swal from 'sweetalert2';

import { Container, Typography } from '@material-ui/core';
import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import InputLabel from '@material-ui/core/InputLabel';
import MenuItem from '@material-ui/core/MenuItem';
import FormControl from '@material-ui/core/FormControl';
import Select from '@material-ui/core/Select';
import TextField from '@material-ui/core/TextField';
import InputAdornment from '@material-ui/core/InputAdornment';
import CallIcon from '@material-ui/icons/Call';

import styles from '../../styles/Home.module.css';
import api from '../services/api';
import CardResult from '../components/cardResult';

interface planData {
    id: string;
    name: string;
    timeMinutes: number;
}

interface priceData {
    id: string;
    dddOrigin: string;
    dddDestination: string;
    minute: number;
}

export default function Home({prices, plans}: any) {

  const classes = useStyles();
  const [open, setOpen] = useState(false);
  const [origin, setOrigin] = useState('');
  const [destination, setDestination] = useState('');  
  const [callTime, setCallTime] = useState('');
  const [plan, setPlan] = useState(''); 
  const [priceWithPlan, setPriceWithPlan] = useState(0);
  const [priceWithoutPlan, setPriceWithoutPlan] = useState(0);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleCalculate = async () => {  
    if(plan === ''){
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'É necessário inserir um plano!'
          });
    }else {
        await api.post('calculation', {
            dddOrigin: origin,
            dddDestination: destination,
            callTime: Number(callTime),
            planId: plan        
        }).then(res => {            
            setPriceWithPlan(res.data.priceWithPlan);
            setPriceWithoutPlan(res.data.priceWithoutPlan);
        }).catch(function (error) {
            if(error.response.data.errors != null){    
                let err = "";
                Object.keys(error.response.data.errors).forEach(function(key) {                
                    error.response.data.errors[key].forEach((element: string) => {
                        err += `*${element} `;                     
                    });
                });           
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: err
                  });
            }else{
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: error.response.data.Message
                });
            }
        });
    }    
  }

  return (
    <>
    <Container>
        <Head>
            <title>Desafio Vórtx</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <Typography component="div" style={{ height: '15vh', display: 'flex', alignItems: 'center' }}>     
            <Image 
                src="https://cdn.vortx.com.br/images/logo-expanded-dourado.svg" 
                width={108}
                height={30} 
            />       
            <h1 className={styles.title}>
                Desafio Vórtx - VxTel FaleMais
            </h1>            
        </Typography>
    </Container>
    <Container maxWidth={false} disableGutters={true}>        
        <Typography component="div" style={{ backgroundColor: '#f4f2ed', height: '70vh', display: 'flex' }}>
            <main className={styles.main}>  
                <h1 className={styles.subTitle}>
                    Insira os dados para calcular o valor da ligação 
                </h1> 
                <Button className={styles.btnDdd} onClick={handleClickOpen}>Inserir DDD de origem e destino</Button>   
                <Dialog disableBackdropClick disableEscapeKeyDown open={open} onClose={handleClose}>
                <DialogTitle>Inserir DDD</DialogTitle>
                <DialogContent>
                    <form className={classes.root}>
                        <FormControl className={classes.formControl}>
                            <InputLabel>Origem</InputLabel>
                            <Select
                                required
                                value={origin}
                                onChange={e => setOrigin(e.target.value)}
                            >                
                                {                    
                                    [...new Map(prices.map(item =>
                                        [item['dddOrigin'], item])).values()].map((price: priceData) => 
                                        <MenuItem key={price.id} value={price.dddOrigin}>{price.dddOrigin}</MenuItem>
                                    )
                                }                
                            </Select>
                        </FormControl>
                        <FormControl className={classes.formControl}>
                            <InputLabel>Destino</InputLabel>
                            <Select
                                required
                                value={destination}
                                onChange={e => setDestination(e.target.value)}
                            > 
                                {
                                    [...new Map(prices.map(item =>
                                        [item['dddDestination'], item])).values()].map((price: priceData) => 
                                        <MenuItem key={price.id} value={price.dddDestination}>{price.dddDestination}</MenuItem>                    
                                    )
                                }
                            </Select>
                        </FormControl>                        
                    </form>
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleClose} color="primary">
                        Cancelar
                    </Button>
                    <Button onClick={handleClose} color="primary">
                        Ok
                    </Button>
                </DialogActions>
                </Dialog>                  
                <TextField
                    label="Duração da Chamada"    
                    type="number"     
                    required           
                    InputProps={{
                        startAdornment: <InputAdornment position="start">Min</InputAdornment>,
                    }}
                    variant="filled"
                    value={callTime}
                    onChange={e => setCallTime(e.target.value)}
                />
                
                <FormControl className={styles.formControlPlan}>
                    <InputLabel>Plano</InputLabel>
                    <Select           
                        required             
                        value={plan}
                        onChange={e => setPlan(e.target.value)}
                    >
                        {
                            plans.map((pl: planData) => 
                                <MenuItem key={pl.id} value={pl.id}>{pl.name}</MenuItem>
                            )
                        }                        
                    </Select>
                </FormControl>
                <Button
                    variant="contained"
                    color="primary"
                    size="small"
                    className={styles.btnCalc}
                    startIcon={<CallIcon />}
                    onClick={handleCalculate}
                >
                    Calcular
                </Button>
                <CardResult priceWithPlan={priceWithPlan} priceWithoutPlan={priceWithoutPlan} />
            </main>
        </Typography>
    </Container>
    <footer className={styles.footer}>
        By André Dantas                
    </footer>    
    </>
  )
}

export async function getServerSideProps() {
    const responsePrice = await api.get('price');

    const responsePlan = await api.get('plan');

    return {
        props: {
            prices: responsePrice.data,
            plans: responsePlan.data
        }
    }
}

const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    root: {
        display: 'flex',
        flexWrap: 'wrap',
    },    
    formControl: {
        margin: theme.spacing(1),
        minWidth: 110,
    },            
    margin: {
        margin: theme.spacing(1),
      },      
    textField: {
        width: '25ch',
    },
  }),
);
